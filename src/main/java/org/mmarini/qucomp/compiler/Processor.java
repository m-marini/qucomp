/*
 * Copyright (c) 2025 Marco Marini, marco.marini@mmarini.org
 *
 *  Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 *    END OF TERMS AND CONDITIONS
 *
 */

package org.mmarini.qucomp.compiler;

import org.mmarini.qucomp.apis.Bra;
import org.mmarini.qucomp.apis.Complex;
import org.mmarini.qucomp.apis.Ket;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

import static java.lang.Math.abs;
import static java.util.Objects.requireNonNull;

/**
 * Executes the code generated by compiler
 */
public class Processor {
    private final Map<String, Object> variables;
    private final Consumer<Object> consumer;

    /**
     * Creates the processor
     *
     * @param consumer the consumer of result values
     */
    public Processor(Consumer<Object> consumer) {
        this.consumer = requireNonNull(consumer);
        this.variables = new HashMap<>();
    }

    private Object add(CommandNode.Add command) throws QuException {
        Object left = evaluate(command.left());
        Object right = evaluate(command.right());
        return switch (left) {
            case Integer value -> add(command, value, right);
            case Complex value -> add(command, value, right);
            case Ket value -> add(command, value, right);
            case Bra value -> add(command, value, right);
            default -> throw command.context().execException("Invalid left operand %s", left);
        };
    }

    private Object add(CommandNode command, int left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> left + value;
            case Complex value -> Complex.create(left).add(value);
            case Ket value -> throw command.context().execException("Unexpected right argument ket (%s)", value);
            case Bra value -> throw command.context().execException("Unexpected right argument bra (%s)", value);
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object add(CommandNode command, Complex left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> left.add(value);
            case Complex value -> left.add(value);
            case Ket value -> throw command.context().execException("Unexpected right argument ket (%s)", value);
            case Bra value -> throw command.context().execException("Unexpected right argument bra (%s)", value);
            default -> throw command.context().execException("Invalid right operand (%s)", right);
        };
    }

    private Object add(CommandNode command, Ket left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value ->
                    throw command.context().execException("Unexpected right argument integer (%s)", value);
            case Complex value ->
                    throw command.context().execException("Unexpected right argument complex (%s)", value);
            case Ket value -> left.extend(value.values().length)
                    .add(value.extend(left.values().length));
            case Bra value -> throw command.context().execException("Unexpected right argument bra (%s)", value);
            default -> throw command.context().execException("Unexpected right argument %s", right);
        };
    }

    private Object add(CommandNode command, Bra left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value ->
                    throw command.context().execException("Unexpected right argument integer (%s)", value);
            case Complex value ->
                    throw command.context().execException("Unexpected right argument complex (%s)", value);
            case Ket value -> throw command.context().execException("Unexpected right argument ket (%s)", value);
            case Bra value -> left.extend(value.values().length)
                    .add(value.extend(left.values().length));
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object cross(CommandNode.Cross command) throws QuException {
        Object right = evaluate(command.right());
        Object left = evaluate(command.left());
        return switch (left) {
            case Integer ignored ->
                    throw command.context().execException("Unexpected left argument integer (%s)", left);
            case Complex ignored ->
                    throw command.context().execException("Unexpected left argument complex (%s)", left);
            case Ket leftVal -> cross(leftVal, right, command);
            case Bra leftVal -> cross(leftVal, right, command);
            default -> throw command.context().execException("Invalid left operand %s", left);
        };
    }

    private Object cross(Ket left, Object right, CommandNode command) throws QuExecException {
        return switch (right) {
            case Integer ignored ->
                    throw command.context().execException("Unexpected right argument integer (%s)", right);
            case Complex ignored ->
                    throw command.context().execException("Unexpected right argument complex (%s)", right);
            case Ket value -> left.cross(value);
            case Bra ignored -> throw command.context().execException("Unexpected right argument bra (%s)", right);
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object cross(Bra left, Object right, CommandNode command) throws QuExecException {
        return switch (right) {
            case Integer ignored ->
                    throw command.context().execException("Unexpected right argument integer (%s)", right);
            case Complex ignored ->
                    throw command.context().execException("Unexpected right argument complex (%s)", right);
            case Bra value -> left.cross(value);
            case Ket ignored -> throw command.context().execException("Unexpected right argument ket (%s)", right);
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object divide(CommandNode.Div command) throws QuException {
        Object left = evaluate(command.left());
        Object right = evaluate(command.right());
        return switch (left) {
            case Integer value -> divide(value, right, command);
            case Complex value -> divide(value, right, command);
            case Ket value -> divide(value, right, command);
            case Bra value -> divide(value, right, command);
            default -> throw command.context().execException("Invalid left operand %s", left);
        };
    }

    private Object divide(int left, Object right, CommandNode command) throws QuExecException {
        return switch (right) {
            case Integer value -> left % value == 0
                    ? left / value
                    : Complex.create(left).div(Complex.create(value));
            case Complex value -> Complex.create(left).div(value);
            case Ket value -> {
                Bra bra = value.conj();
                yield bra.mul(bra.mul(value).inv().mul(left));
            }
            case Bra value -> {
                Ket ket = value.conj();
                yield ket.mul(value.mul(ket).inv().mul(left));
            }
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object divide(Complex left, Object right, CommandNode command) throws QuExecException {
        return switch (right) {
            case Integer value -> left.div(Complex.create(value));
            case Complex value -> left.div(value);
            case Ket value -> {
                Bra bra = value.conj();
                yield bra.mul(bra.mul(value).inv().mul(left));
            }
            case Bra value -> {
                Ket ket = value.conj();
                yield ket.mul(value.mul(ket).inv().mul(left));
            }
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object divide(Bra left, Object right, CommandNode command) throws QuExecException {
        return switch (right) {
            case Integer value -> left.mul(1f / value);
            case Complex value -> left.mul(value.inv());
            case Ket value -> throw command.context().execException("Unexpected right argument ket (%s)", value);
            case Bra value -> {
                left = left.extend(value.values().length);
                value = value.extend(left.values().length);
                Ket ket = value.conj();
                yield left.mul(ket).mul(value.mul(ket).inv());
            }
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object divide(Ket left, Object right, CommandNode command) throws QuExecException {
        return switch (right) {
            case Integer value -> left.mul(1f / value);
            case Complex value -> left.mul(value.inv());
            case Bra value -> throw command.context().execException("Unexpected right argument bra (%s)", value);
            case Ket value -> throw command.context().execException("Unexpected right argument ket (%s)", value);
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object evalCodeUnit(CommandNode.CodeUnit cmd) throws QuException {
        Object result = null;
        for (CommandNode command : cmd.commands()) {
            result = evaluate(command);
            if (result != null) {
                consumer.accept(result);
            }
        }
        return result;
    }

    /**
     * Returns the evaluation of command
     *
     * @param command the command
     */
    public Object evaluate(CommandNode command) throws QuException {
        return switch (command) {
            case null -> throw new QuException("Missing command");
            case CommandNode.CodeUnit cmd -> evalCodeUnit(cmd);
            case CommandNode.Value cmd -> cmd.value();
            case CommandNode.Clear ignored -> {
                variables.clear();
                yield null;
            }
            case CommandNode.Conj cmd -> {
                Object value = evaluate(cmd.arg());
                yield switch (value) {
                    case null -> throw new QuException("Missing value");
                    case Integer val -> val;
                    case Complex val -> val.conj();
                    case Ket val -> val.conj();
                    case Bra val -> val.conj();
                    default -> throw cmd.context().execException("Unexpected value: " + value);
                };
            }
            case CommandNode.RetrieveVar cmd -> {
                Object value = variables.get(cmd.id());
                if (value == null) {
                    throw cmd.context().execException("Undefined variable " + cmd.id());
                }
                yield value;
            }
            case CommandNode.Negate cmd -> {
                Object value = evaluate(cmd.arg());
                yield switch (value) {
                    case null -> throw new QuException("Missing value");
                    case Integer val -> -val;
                    case Complex val -> val.neg();
                    case Ket val -> val.neg();
                    case Bra val -> val.neg();
                    default -> throw cmd.context().execException("Unexpected value: " + value);
                };
            }
            case CommandNode.Assign cmd -> {
                Object value = evaluate(cmd.arg());
                if (value == null) {
                    throw new QuException("Unexpected value");
                }
                variables.put(cmd.id(), value);
                yield value;
            }
            case CommandNode.CallFunction cmd -> {
                if (!"sqrt".equals(cmd.id())) {
                    throw cmd.context().execException("Unknown function " + cmd.id());
                }
                Object value = evaluate(cmd.arg());
                yield sqrt(cmd.context(), value);
            }
            case CommandNode.IntToKet cmd -> {
                Object value = evaluate(cmd.arg());
                yield switch (value) {
                    case null -> throw new QuException("Missing value");
                    case Integer state -> Ket.base(state);
                    default -> throw cmd.context().execException("Expected integer value: (" + value + ")");
                };
            }
            case CommandNode.Add cmd -> add(cmd);
            case CommandNode.Sub cmd -> sub(cmd);
            case CommandNode.Mul cmd -> multiply(cmd);
            case CommandNode.Div cmd -> divide(cmd);
            case CommandNode.Cross cmd -> cross(cmd);
            default -> throw command.context().execException("Unknown command " + command);
        };
    }

    private Object multiply(CommandNode.Mul command) throws QuException {
        Object left = evaluate(command.left());
        Object right = evaluate(command.right());
        return switch (left) {
            case Integer value -> multiply(command, value, right);
            case Complex value -> multiply(command, value, right);
            case Ket value -> multiply(command, value, right);
            case Bra value -> multiply(command, value, right);
            default -> throw command.context().execException("Invalid left operand %s", left);
        };
    }

    private Object multiply(CommandNode command, int left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> left * value;
            case Complex value -> value.mul(left);
            case Ket value -> value.mul(left);
            case Bra value -> value.mul(left);
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object multiply(CommandNode command, Complex left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> left.mul(value);
            case Complex value -> value.mul(left);
            case Ket value -> value.mul(left);
            case Bra value -> value.mul(left);
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object multiply(CommandNode command, Bra left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> left.mul(value);
            case Complex value -> left.mul(value);
            case Ket value -> left.extend(value.values().length)
                    .mul(value.extend(left.values().length));
            case Bra value -> throw command.context().execException("Unexpected right argument bra (%s)", value);
            default -> throw command.context().execException("Invalid right operand (%s)", right);
        };
    }

    private Object multiply(CommandNode command, Ket left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> left.mul(value);
            case Complex value -> left.mul(value);
            case Ket value -> throw command.context().execException("Unexpected right argument ket (%s)", value);
            case Bra value -> throw command.context().execException("Unexpected right argument bra (%s)", value);
            default -> throw command.context().execException("Invalid right operand (%s)", right);
        };
    }

    private Object sqrt(SourceContext context, Object value) throws QuException {
        return switch (value) {
            case null -> throw new QuException("Missing argument value");
            case Integer val -> Complex.create((float) Math.sqrt(val));
            case Complex val when abs(val.module()) == 0 -> Complex.zero();
            case Complex val when val.real() >= 0 -> {
                float reDelta = val.real() + val.module();
                float re = (float) Math.sqrt(reDelta / 2);
                float im = (float) (val.im() / Math.sqrt(2 * reDelta));
                yield new Complex(re, im);
            }
            case Complex val -> {
                float reDelta = -val.real() + val.module();
                float re = (float) (val.im() / Math.sqrt(2 * reDelta));
                float im = (float) Math.sqrt(reDelta / 2);
                yield new Complex(re, im);
            }
            case Bra val -> throw context.execException("Unexpected argument bra (%s)", val);
            case Ket val -> throw context.execException("Unexpected argument ket (%s)", val);
            default -> throw context.execException("Unexpected argument (%s)", value);
        };
    }

    private Object sub(CommandNode.Sub command) throws QuException {
        Object left = evaluate(command.left());
        Object right = evaluate(command.right());
        return switch (left) {
            case Integer value -> sub(command, value, right);
            case Complex value -> sub(command, value, right);
            case Ket value -> sub(command, value, right);
            case Bra value -> sub(command, value, right);
            default -> throw command.context().execException("Invalid left operand %s", left);
        };
    }

    private Object sub(CommandNode command, Bra left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> throw command.context().execException("Unexpected right argument int (%s)", value);
            case Complex value ->
                    throw command.context().execException("Unexpected right argument complex (%s)", value);
            case Ket value -> throw command.context().execException("Unexpected right argument ket (%s)", value);
            case Bra value -> left.extend(value.values().length)
                    .sub(value.extend(left.values().length));
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object sub(CommandNode command, Complex left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> left.sub(value);
            case Complex value -> left.sub(value);
            case Ket value -> throw command.context().execException("Unexpected right argument ket (%s)", value);
            case Bra value -> throw command.context().execException("Unexpected right argument bra (%s)", value);
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object sub(CommandNode command, Ket left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> throw command.context().execException("Unexpected right argument int (%s)", value);
            case Complex value ->
                    throw command.context().execException("Unexpected right argument complex (%s)", value);
            case Ket value -> left.extend(value.values().length)
                    .sub(value.extend(left.values().length));
            case Bra value -> throw command.context().execException("Unexpected right argument bra (%s)", value);
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    private Object sub(CommandNode command, int left, Object right) throws QuExecException {
        return switch (right) {
            case Integer value -> left - value;
            case Complex value -> Complex.create(left).sub(value);
            case Ket value -> throw command.context().execException("Unexpected right argument ket (%s)", value);
            case Bra value -> throw command.context().execException("Unexpected right argument bra (%s)", value);
            default -> throw command.context().execException("Invalid right operand %s", right);
        };
    }

    /**
     * Returns the variable dictionary
     */
    public Map<String, Object> variables() {
        return variables;
    }
}
